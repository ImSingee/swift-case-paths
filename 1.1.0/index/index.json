{"interfaceLanguages":{"swift":[{"children":[{"title":"Case paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casekeypath","title":"CaseKeyPath","type":"typealias"},{"title":"XCTest support","type":"groupMarker"},{"children":[{"title":"Testing optionals","type":"groupMarker"},{"path":"\/documentation\/casepaths\/xctmodify(_:_:_:file:line:)","title":"func XCTModify<Wrapped>(inout Wrapped?, () -> String, (inout Wrapped) throws -> Void, file: StaticString, line: UInt)","type":"func"},{"title":"Deprecated test helpers","type":"groupMarker"},{"children":[{"title":"XCTModify","type":"groupMarker"},{"path":"\/documentation\/casepaths\/xctmodify(_:case:_:_:file:line:)-1lm9s","title":"func XCTModify<Enum, Case>(inout Enum, case: AnyCasePath<Enum, Case>, () -> String, (inout Case) throws -> Void, file: StaticString, line: UInt)","type":"func"},{"title":"XCTUnwrap","type":"groupMarker"},{"path":"\/documentation\/casepaths\/xctunwrap(_:case:_:file:line:)","title":"func XCTUnwrap<Enum, Case>(() throws -> Enum, case: (Enum) -> Case?, () -> String, file: StaticString, line: UInt) throws -> Case","type":"func"}],"path":"\/documentation\/casepaths\/xctmodifydeprecations","title":"Deprecated test helpers","type":"symbol"}],"path":"\/documentation\/casepaths\/xctmodify(_:case:_:_:file:line:)-94qma","title":"func XCTModify<Enum, Case>(inout Enum, case: CaseKeyPath<Enum, Case>, () -> String, (inout Case) throws -> Void, file: StaticString, line: UInt)","type":"func"},{"title":"Guides","type":"groupMarker"},{"path":"\/documentation\/casepaths\/swift59","title":"Upgrading to CasePaths 1.1 and Swift 5.9","type":"article"},{"title":"Deprecated interfaces","type":"groupMarker"},{"children":[{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/casepaths\/extract(case:from:)-89rof","title":"func extract<Root, Value>(case: (Value) -> Root, from: Root) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(case:from:)-82wth","title":"func extract<Root, Value>(case: (Value) -> Root?, from: Root?) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(_:)-2jy2a","title":"func extract<Root, Value>((Value) -> Root) -> (Root) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(_:)-5ivuf","title":"func extract<Root, Value>((Value) -> Root?) -> (Root?) -> Value?","type":"func"}],"path":"\/documentation\/casepaths\/deprecations","title":"Deprecated interfaces","type":"symbol"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Deriving case key paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/cases","title":"CasePathable.Cases","type":"typealias"},{"title":"Extracting, replacing, and modifying values","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/subscript(case:)-6cdhl","title":"subscript<Value>(case _: CaseKeyPath<Self, Value>) -> Value?","type":"subscript"},{"path":"\/documentation\/casepaths\/casepathable\/subscript(case:)-8yr2s","title":"subscript<Value>(case _: CaseKeyPath<Self, Value>) -> Value","type":"subscript"},{"path":"\/documentation\/casepaths\/casepathable\/modify(_:yield:file:line:)","title":"func modify<Value>(CaseKeyPath<Self, Value>, yield: (inout Value) -> Void, file: StaticString, line: UInt)","type":"method"},{"title":"Case properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/is(_:)","title":"func `is`<Value>(CaseKeyPath<Self, Value>) -> Bool","type":"method"},{"path":"\/documentation\/casepaths\/casepathable\/subscript(dynamicmember:)","title":"subscript<Value>(dynamicMember _: CaseKeyPath<Self, Value>) -> Value?","type":"subscript"},{"title":"Manual conformances","type":"groupMarker"},{"children":[{"title":"Creating paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/init(embed:extract:)","title":"init(embed: (Value) -> Root, extract: (Root) -> Value?)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init(_:)-65qkv","title":"init(CaseKeyPath<Root, Value>)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init()","title":"init()","type":"init"},{"title":"Extracting and embedding values","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/extract(from:)","title":"func extract(from: Root) -> Value?","type":"method"},{"path":"\/documentation\/casepaths\/anycasepath\/embed(_:)","title":"func embed(Value) -> Root","type":"method"},{"title":"Appending paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/subscript(dynamicmember:)","title":"subscript<AppendedValue>(dynamicMember _: KeyPath<Value.AllCasePaths, AnyCasePath<Value, AppendedValue>>) -> AnyCasePath<Root, AppendedValue>","type":"subscript"},{"title":"Deprecated interfaces","type":"groupMarker"},{"children":[{"title":"Creating paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/init(unsafe:)-4xq8n","title":"init(unsafe: (Value) -> Root)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init(unsafe:)-2skr2","title":"init(unsafe: Root)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init(_:)-5t7e8","title":"init((Value) -> Root)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init(_:)-5hb2e","title":"init(Root)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/init(_:)-2cuas","title":"init(Root.Type)","type":"init"},{"path":"\/documentation\/casepaths\/anycasepath\/case(_:)-4lmya","title":"static func `case`((Value) -> Root) -> AnyCasePath<Root, Value>","type":"method"},{"path":"\/documentation\/casepaths\/anycasepath\/case(_:)-6gkwv","title":"static func `case`(Root) -> AnyCasePath<Root, Value>","type":"method"},{"path":"\/documentation\/casepaths\/anycasepath\/constant(_:)","title":"static func constant(Value) -> AnyCasePath<Root, Value>","type":"method"},{"path":"\/documentation\/casepaths\/anycasepath\/self","title":"static var `self`: AnyCasePath<Root, Root>","type":"property"},{"path":"\/documentation\/casepaths\/anycasepath\/some","title":"static var some: AnyCasePath<Root, Value>","type":"property"},{"path":"\/documentation\/casepaths\/anycasepath\/never","title":"static var never: AnyCasePath<Root, Never>","type":"property"},{"path":"\/documentation\/casepaths\/anycasepath\/rawvalue","title":"static var rawValue: AnyCasePath<Root, Value>","type":"property"},{"title":"Modifying values","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/modify(_:_:)","title":"func modify<Result>(inout Root, (inout Value) throws -> Result) throws -> Result","type":"method"},{"title":"Appending paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/appending(path:)","title":"func appending<AppendedValue>(path: AnyCasePath<Value, AppendedValue>) -> AnyCasePath<Root, AppendedValue>","type":"method"},{"path":"\/documentation\/casepaths\/anycasepath\/'..(_:_:)-8bw4h","title":"static func .. <AppendedValue>(AnyCasePath<Root, Value>, AnyCasePath<Value, AppendedValue>) -> AnyCasePath<Root, AppendedValue>","type":"op"},{"path":"\/documentation\/casepaths\/anycasepath\/'..(_:_:)-8n2ce","title":"static func .. <AppendedValue>(AnyCasePath<Root, Value>, (AppendedValue) -> Value) -> AnyCasePath<Root, AppendedValue>","type":"op"},{"path":"\/documentation\/casepaths\/'..(_:_:)","title":"func .. <Root, Value, AppendedValue>((Root) -> Value?, (AppendedValue) -> Value) -> (Root) -> AppendedValue?","type":"op"},{"title":"Matching paths","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/~=(_:_:)","title":"static func ~= (AnyCasePath<Root, Value>, Root) -> Bool","type":"op"},{"title":"Type alias","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath","title":"CasePath","type":"typealias"}],"path":"\/documentation\/casepaths\/anycasepathdeprecations","title":"Deprecated interfaces","type":"symbol"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/description-swift.type.property","title":"static var description: AnyCasePath<String, Value>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/casepaths\/anycasepath\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/anycasepath\/description-swift.property","title":"var description: String","type":"property"}],"path":"\/documentation\/casepaths\/anycasepath\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/casepaths\/anycasepath","title":"AnyCasePath","type":"struct"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/allcasepaths-swift.associatedtype","title":"AllCasePaths","type":"associatedtype"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/subscript(case:)-8av06","title":"subscript(case _: PartialCaseKeyPath<Self>) -> Any?","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepathable\/allcasepaths-swift.type.property","title":"static var allCasePaths: Self.AllCasePaths","type":"property"}],"path":"\/documentation\/casepaths\/casepathable","title":"CasePathable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/casepaths\/case\/init()","title":"init()","type":"init"},{"path":"\/documentation\/casepaths\/case\/init(_:)","title":"init<Root>(CaseKeyPath<Root, Value>)","type":"init"},{"path":"\/documentation\/casepaths\/case\/init(embed:extract:)","title":"init<Root>(embed: (Value) -> Root, extract: (Root) -> Value?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/case\/never","title":"var never: Case<Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/casepaths\/case\/embed(_:)","title":"func embed(Value) -> Any","type":"method"},{"path":"\/documentation\/casepaths\/case\/extract(from:)","title":"func extract(from: Any) -> Value?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/casepaths\/case\/subscript(dynamicmember:)","title":"subscript<AppendedValue>(dynamicMember _: KeyPath<Value.AllCasePaths, AnyCasePath<Value, AppendedValue>>) -> Case<AppendedValue>","type":"subscript"}],"path":"\/documentation\/casepaths\/case","title":"Case","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/casepaths\/\/(_:)-2dw29","title":"func \/ <Root>(Root?) -> AnyCasePath<Root?, Void>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-2vh71","title":"func \/ <Root, Value>((Value) -> Root) -> AnyCasePath<Root, Value>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-3iptp","title":"func \/ <Root, Value>((Value) -> Root?) -> AnyCasePath<Root?, Value>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-4v1w8","title":"func \/ <Root>(Root) -> (Root) -> Void?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-7jewc","title":"func \/ <Root, Value>(AnyCasePath<Root, Value>) -> AnyCasePath<Root, Value>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-8h7yj","title":"func \/ <Root, Value>((Value) -> Root?) -> (Root?) -> Value?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-9h6ip","title":"func \/ <Root>(Root) -> AnyCasePath<Root, Void>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-9oq0w","title":"func \/ <Root>(Root) -> (Root?) -> Void?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-9tuff","title":"func \/ <Root, Value>((Value) -> Root) -> (Root) -> Value?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-d5or","title":"func \/ <Root>(Root.Type) -> AnyCasePath<Root, Root>","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/casepaths\/partialcasekeypath","title":"PartialCaseKeyPath","type":"typealias"}],"path":"\/documentation\/casepaths","title":"CasePaths","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}