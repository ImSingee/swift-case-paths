{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"CasePaths 1.1 introduces new APIs for deriving case paths that are safer, more ergonomic, more"},{"type":"text","text":" "},{"type":"text","text":"performant, and more powerful than the existing APIs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In past versions of the library, the primary way to derive a case path was via the form:"}]},{"type":"codeListing","syntax":null,"code":["\/<#enum name#>.<#case#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It kind of looks like a key path with the "},{"type":"codeVoice","code":"\\"},{"type":"text","text":" tilting the wrong way, but is actually an invocation"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator with an "},{"type":"codeVoice","code":"Enum.case"},{"type":"text","text":" initializer. Given just this initializer, the function"},{"type":"text","text":" "},{"type":"text","text":"uses runtime reflection to produce a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePath"},{"type":"text","text":" value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So given an enum:"}]},{"type":"codeListing","syntax":"swift","code":["enum UserAction {","  case home(HomeAction)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can produce a case path:"}]},{"type":"codeListing","syntax":"swift","code":["\/UserAction.home"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the library has strived to optimize this reflection mechanism and work around bugs in the"},{"type":"text","text":" "},{"type":"text","text":"runtime, it now offers a much better solution that is free of reflection-based code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving case paths is now a two-step process that is still mostly free of boilerplate:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You attach the "},{"type":"codeVoice","code":"CasePathable()"},{"type":"text","text":" macro to your enum"}]}]}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum UserAction {","  case home(HomeAction)","}"]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You derive a case path using an actual key path expression:"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\\UserAction.Cases.home"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This key path expression returns a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath"},{"type":"text","text":", which is a special kind of key path for enums"},{"type":"text","text":" "},{"type":"text","text":"that can extract, modify, and embed the associated value of an enum case."}]},{"anchor":"Passing-case-key-paths-to-APIs-that-take-case-paths","level":3,"type":"heading","text":"Passing case key paths to APIs that take case paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While libraries that use case paths should be updated to take "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath"},{"type":"text","text":"s directly, and should"},{"type":"text","text":" "},{"type":"text","text":"deprecate APIs that take "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePath"},{"type":"text","text":"s (now "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath"},{"type":"text","text":"s), you can continue to use these"},{"type":"text","text":" "},{"type":"text","text":"existing APIs by converting case key paths to type-erased case paths via"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath\/init(_:)-65qkv"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Before:","action: \/UserAction.home","","\/\/ After:","action: AnyCasePath(\\.home)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And when a library begins to provide APIs that take case key paths, you can pass a key path"},{"type":"text","text":" "},{"type":"text","text":"expression directly:"}]},{"type":"codeListing","syntax":"swift","code":["action: \\.home"]},{"anchor":"Working-with-case-key-paths","level":3,"type":"heading","text":"Working with case key paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you maintain APIs that take "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePath"},{"type":"text","text":" (now "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath"},{"type":"text","text":") values, you should introduce new"},{"type":"text","text":" "},{"type":"text","text":"APIs that take "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath"},{"type":"text","text":"s instead. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath"},{"type":"text","text":"s have all the functionality of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath"},{"type":"text","text":"s (and more), but you work with them more like regular key paths:"}]},{"anchor":"Extracting-associated-values","level":4,"type":"heading","text":"Extracting associated values"},{"type":"codeListing","syntax":"swift","code":["\/\/ Before:","casePath.extract(from: root)","","\/\/ After:","root[case: casePath]"]},{"anchor":"Embedding-associated-values","level":4,"type":"heading","text":"Embedding associated values"},{"type":"codeListing","syntax":"swift","code":["\/\/ Before:","casePath.embed(value)","","\/\/ After:","casePath(value)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Case key paths can also replace an enumâ€™s existing associated value via"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePathable\/subscript(case:)-8yr2s"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["root[case: casePath] = value"]},{"anchor":"Modifying-associated-values","level":4,"type":"heading","text":"Modifying associated values"},{"type":"codeListing","syntax":"swift","code":["\/\/ Before:","casePath.modify(&root) {","  $0.count += 1","}","","\/\/ After:","root.modify(casePath) {","  $0.count += 1","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/casepaths\/swift59"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CasePaths\/documentation\/CasePaths\/Swift59","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to migrate existing case path code to utilize the new "},{"type":"codeVoice","code":"CasePathable()"},{"type":"text","text":" macro and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath"},{"type":"text","text":"s."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Upgrading to CasePaths 1.1 and Swift 5.9","role":"article","modules":[{"name":"CasePaths"}]},"hierarchy":{"paths":[["doc:\/\/CasePaths\/documentation\/CasePaths"]]},"references":{"doc://CasePaths/documentation/CasePaths/CaseKeyPath":{"role":"symbol","title":"CaseKeyPath","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseKeyPath"}],"abstract":[{"type":"text","text":"A key path to the associated value of an enum case."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CaseKeyPath","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseKeyPath"}],"url":"\/documentation\/casepaths\/casekeypath"},"doc://CasePaths/documentation/CasePaths/AnyCasePath/init(_:)-65qkv":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Creates a type-erased case path for given case key path."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath\/init(_:)-65qkv","kind":"symbol","type":"topic","url":"\/documentation\/casepaths\/anycasepath\/init(_:)-65qkv"},"doc://CasePaths/documentation/CasePaths/CasePathable/subscript(case:)-8yr2s":{"role":"symbol","title":"subscript(case:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"Replaces the associated value of a root enum at a case key path when the case matches."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePathable\/subscript(case:)-8yr2s","kind":"symbol","type":"topic","url":"\/documentation\/casepaths\/casepathable\/subscript(case:)-8yr2s"},"doc://CasePaths/documentation/CasePaths/AnyCasePath":{"role":"symbol","title":"AnyCasePath","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyCasePath"}],"abstract":[{"type":"text","text":"A type-erased case path that supports embedding a value in a root and attempting to extract a"},{"type":"text","text":" "},{"type":"text","text":"rootâ€™s embedded value."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/AnyCasePath","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyCasePath"}],"url":"\/documentation\/casepaths\/anycasepath"},"doc://CasePaths/documentation/CasePaths":{"role":"collection","title":"CasePaths","abstract":[{"type":"text","text":"Case paths bring the power and ergonomics of key paths to enums."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths","kind":"symbol","type":"topic","url":"\/documentation\/casepaths"},"doc://CasePaths/documentation/CasePaths/CasePath":{"deprecated":true,"role":"symbol","title":"CasePath","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}],"abstract":[{"type":"text","text":"A type-erased case path that supports embedding a value in a root and attempting to extract a"},{"type":"text","text":" "},{"type":"text","text":"rootâ€™s embedded value."}],"identifier":"doc:\/\/CasePaths\/documentation\/CasePaths\/CasePath","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CasePath"}],"url":"\/documentation\/casepaths\/casepath"}}}